importScripts('/cache-polyfill.js');

var CACHE_VERSION =  '<%= (ENV['DEPLOY_ID'] ? "#{ENV['DEPLOY_ID']}" : '0') %>';
var CURRENT_CACHES = {
  prefetch: 'middleman-webpack-netlify-cms' + CACHE_VERSION
};

self.addEventListener('install', function(e) {
  e.waitUntil(
    caches.open(CURRENT_CACHES.prefetch).then(function(cache) {
     return cache.addAll([
      <% sitemap.resources.select { | resource | resource.path =~ /^(?!.json|sw|cache-polyfill.js$).*\.(html|js|css|woff)$/ }.each do | resource | %>
        "<%= resource.url.gsub('.html', '/') %>",
      <%end%>
     ]);
    })
  );
  return self.skipWaiting()
});

self.addEventListener('activate', function (event) {
    var expectedCacheNames = Object.keys(CURRENT_CACHES).map(function (key) {
      return CURRENT_CACHES[key];
    });
    event.waitUntil(
      caches.keys().then(function (cacheNames) {
        return Promise.all(
          cacheNames.map(function (cacheName) {
            if (expectedCacheNames.indexOf(cacheName) === -1) {
              return caches.delete(cacheName);
            }
          })
        );
      })
    );
  return self.clients.claim();
});


self.addEventListener('fetch', function(event) {
  
  if (event.request.headers.get('range')) {
    var rangeHeader=event.request.headers.get('range');
    var rangeMatch =rangeHeader.match(/^bytes\=(\d+)\-(\d+)?/)
    var pos =Number(rangeMatch[1]);
    var pos2=rangeMatch[2];
    if (pos2) { pos2=Number(pos2); }
    
    event.respondWith(
      caches.open(CURRENT_CACHES.prefetch)
      .then(function(cache) {
        return cache.match(event.request.url);
      }).then(function(res) {
        if (!res) {
          return fetch(event.request)
          .then(res => {
            return res.arrayBuffer();
          });
        }
        return res.arrayBuffer();
      }).then(function(ab) {
        let responseHeaders=  {
          status: 206,
          statusText: 'Partial Content',
          headers: [
            ['Content-Type', 'video/mp4'],
            ['Content-Range', 'bytes ' + pos + '-' + 
            (pos2||(ab.byteLength - 1)) + '/' + ab.byteLength]]
        };
        
        var abSliced={};
        if (pos2>0){
          abSliced=ab.slice(pos,pos2+1);
        }else{
          abSliced=ab.slice(pos);
        }
        
        return new Response(
          abSliced,responseHeaders
        );
      }));
  } else {
    event.respondWith(
    caches.match(event.request).then(function(response) {
      if (response) {
        return response;
      }
      return fetch(event.request).then(function(response) {

        return response;
      }).catch(function(error) {
        console.error('Fetching failed:', error);

        throw error;
      });
    })
    );
  }
});